<?php

/*
 * This file is part of the symfony package.
 * (c) 2004-2006 Fabien Potencier <fabien.potencier@symfony-project.com>
 * (c) 2004-2006 Sean Kerr <sean@code-box.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * sfFactoryConfigHandler allows you to specify which factory implementation the
 * system will use.
 *
 * @package    symfony
 * @subpackage config
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @author     Sean Kerr <sean@code-box.org>
 * @version    SVN: $Id: sfFactoryConfigHandler.class.php 33299 2011-12-30 17:42:47Z fabien $
 */
class sfFactoryConfigHandler extends sfYamlConfigHandler
{

  private function transformSingle($suffix, $key, $data, &$target)
  {
    if (array_key_exists($key, $data)) {
      $target[$suffix . '.' . $key] = $data[$key];
    }

    return $this;
  }

  private function transformCommon($key, $data)
  {
    $result = [];

    if (array_key_exists('param', $data)) {
      $this->transformSingle($key, 'cache', $data['param'], $result);
      unset($data['param']['cache']);
    }

    $this
      ->transformSingle($key, 'class', $data, $result)
      ->transformSingle($key, 'param', $data, $result);

    return $result;
  }

  private function transformAll($config)
  {
    static $transformKeys = [
      'controller',
      'request',
      'response',
      'routing',
      'storage',
      'user',
      'view_cache',
      'view_cache_manager',
      //'i18n'
    ];

    $result = array();

    foreach ($transformKeys as $key) {
      if (!array_key_exists($key, $config)) {
        continue;
      }

      $result = array_merge($result, $this->transformCommon($key, $config[$key]));
    }

    return $result;
  }

  /**
   * Executes this configuration handler.
   *
   * @param array $configFiles An array of absolute filesystem path to a configuration file
   *
   * @return string Data to be written to a cache file
   *
   * @throws <b>sfConfigurationException</b> If a requested configuration file does not exist or is not readable
   * @throws <b>sfParseException</b> If a requested configuration file is improperly formatted
   */
  public function execute($configFiles)
  {
    // parse the yaml
    $config = self::getConfiguration($configFiles);

    // compile data
    $retval = sprintf(
      "<?php\n".
      "// auto-generated by sfFactoryConfigHandler\n".
      "// date: %s\n" .
      "sfConfig::set('sf_factory_transformed', %s);\n",
      date('Y/m/d H:i:s'), var_export($this->transformAll($config), true)
    );

    return $retval;
  }

  /**
   * @see sfConfigHandler
   */
  static public function getConfiguration(array $configFiles)
  {
    $config = self::replaceConstants(self::flattenConfigurationWithEnvironment(self::parseYamls($configFiles)));

    foreach ($config as $factory => $values)
    {
      if (isset($values['file']))
      {
        $config[$factory]['file'] = self::replacePath($values['file']);
      }
    }

    return $config;
  }
}
